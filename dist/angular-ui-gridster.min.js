/**
 * @license Angular UI Gridster v0.4.1
 * (c) 2010-2014. https://github.com/JimLiu/angular-ui-gridster
 * License: MIT
 */
!function(){"use strict";angular.module("ui.gridster",[]).constant("uiGridsterConfig",{widget_margins:[10,10],widget_base_dimensions:[100,100],widget_selector:".ui-gridster-item",resize:{enabled:!1}})}(),function(){"use strict";angular.module("ui.gridster").controller("GridsterController",["$scope","$element","$attrs",function($scope,$element){this.scope=$scope,this.element=$element,$scope.$dragEnabled=!0,$scope.$modelValue=null;var gridster=null;$scope.init=function(element,options){return gridster=element.gridster(options).data("gridster")},this.addItem=function(element,sizeX,sizeY,col,row){return gridster?gridster.add_widget(element,sizeX,sizeY,col,row):null},this.removeItem=function(element){gridster&&gridster.remove_widget(element,function(){$scope.$apply()})},this.resizeItem=function(widget,sizeX,sizeY){gridster&&widget&&gridster.resize_widget(widget,sizeX,sizeY)},$scope.serializeToJson=function(){var s=gridster.serialize();return JSON.stringify(s)},$scope.applyChanges=function(){var items=gridster.serialize();angular.forEach(items,function(item,index){var widget=$scope.$modelValue[index];widget.sizeX=item.size_x,widget.sizeY=item.size_y,widget.row=item.row,widget.col=item.col})}}])}(),function(){"use strict";angular.module("ui.gridster").directive("uiGridster",["uiGridsterConfig","$timeout",function(uiGridsterConfig){return{restrict:"A",scope:!0,controller:"GridsterController",require:"ngModel",link:function(scope,element,attrs,ngModel){function combineCallbacks(first,second){return second&&"function"==typeof second?function(e,ui){first(e,ui),second(e,ui)}:first}var gridster,options={draggable:{},resize:{}};options=angular.extend(options,uiGridsterConfig),options.draggable.stop=function(){scope.$apply()},options.resize.stop=function(){scope.$apply()},ngModel&&(ngModel.$render=function(){ngModel.$modelValue&&angular.isArray(ngModel.$modelValue)||(scope.$modelValue=[]),scope.$modelValue=ngModel.$modelValue}),attrs.$observe("uiGridster",function(val){var gval=scope.$eval(val);"undefined"!=typeof gval&&(gval.draggable&&(gval.draggable.stop=gval.draggable.stop?combineCallbacks(options.draggable.stop,gval.draggable.stop):options.resize.stop),gval.resize&&(gval.resize.stop=gval.resize.stop?combineCallbacks(options.resize.stop,gval.resize.stop):options.resize.stop),angular.extend(options,gval)),gridster=scope.init(element,options)}),scope.$watch(function(){return scope.$eval(attrs.gridsterDragEnabled)},function(val){if("boolean"==typeof val){if(scope.$dragEnabled=val,!gridster)return;val?gridster.enable():gridster.disable()}})}}}])}(),function(){"use strict";angular.module("ui.gridster").directive("uiGridsterItem",["$compile",function($compile){return{restrict:"A",require:"^uiGridster",link:function(scope,element,attrs,controller){var gridsterItem=null,widget=element;element.addClass("ui-gridster-item"),scope.gridsterItem=null,attrs.$observe("uiGridsterItem",function(val){var ival=scope.$eval(val);if("object"==typeof ival){gridsterItem=ival,scope.gridsterItem=gridsterItem;var placeHolder=$("<li></li>");element.replaceWith(placeHolder);var widget=controller.addItem(element,gridsterItem.sizeX,gridsterItem.sizeY,gridsterItem.col,gridsterItem.row);$compile(widget.contents())(scope),placeHolder.replaceWith(widget),widget.bind("$destroy",function(){controller.removeItem(widget)}),scope.$watch(function(){return widget.attr("data-col")},function(val){gridsterItem.col=parseInt(val)}),scope.$watch(function(){return widget.attr("data-row")},function(val){gridsterItem.row=parseInt(val)}),scope.$watch(function(){return widget.attr("data-sizex")},function(val){gridsterItem.sizeX=parseInt(val)}),scope.$watch(function(){return widget.attr("data-sizey")},function(val){gridsterItem.sizeY=parseInt(val)})}}),scope.$watchCollection("[gridsterItem.sizeX, gridsterItem.sizeY]",function(newValues){newValues[0]&&newValues[1]&&controller.resizeItem(widget,newValues[0],newValues[1])})}}}])}();
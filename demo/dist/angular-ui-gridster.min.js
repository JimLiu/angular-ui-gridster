/**
 * @license Angular UI Gridster v0.1.0
 * (c) 2010-2014. https://github.com/JimLiu/angular-ui-gridster
 * License: MIT
 */
!function(){"use strict";angular.module("ui.gridster",[]).constant("uiGridsterConfig",{widget_margins:[5,5],widget_base_dimensions:[100,55],widget_selector:"ui-gridster-item",resize:{enabled:!0}})}(),function(){"use strict";angular.module("ui.gridster").controller("GridsterController",["$scope","$element","$attrs",function($scope){this.scope=$scope;var gridster=null;$scope.init=function(element,options){return gridster=element.gridster(options).data("gridster")},this.addItem=function(element,width,height,col,row){return gridster?gridster.add_widget(element,width,height,col,row):null},this.removeItem=function(element){gridster&&gridster.remove_widget(element)},this.resizeItem=function(widget,width,height){gridster&&widget&&gridster.resize_widget(widget,width,height)}}])}(),function(){"use strict";angular.module("ui.gridster").directive("uiGridster",["uiGridsterConfig",function(uiGridsterConfig){return{restrict:"A",scope:!0,controller:"GridsterController",link:function(scope,element,attrs){function combineCallbacks(first,second){return second&&"function"==typeof second?function(e,ui){first(e,ui),second(e,ui)}:first}var gridster,options={draggable:{},resize:{}};options=angular.extend(options,uiGridsterConfig),options.draggable.stop=function(event,ui){var itemscope=angular.element(ui.$helper).scope();if(itemscope){var item=itemscope.gridsterItem,grid=ui.$helper.coords().grid;(item.col!=grid.col||item.row!=grid.row)&&itemscope.$apply(function(){item.col=grid.col,item.row=grid.row})}},options.resize.stop=function(event,ui,$widget){var itemscope=angular.element(ui.$helper).scope();if(itemscope){var item=itemscope.gridsterItem,grid=$widget.coords().grid;(item.width!=grid.size_x||item.height!=grid.size_y)&&itemscope.$apply(function(){item.width=grid.size_x,item.height=grid.size_y})}},attrs.$observe("uiGridster",function(val){var gval=scope.$eval(val);"undefined"!=typeof gval&&(gval.draggable&&(gval.draggable.stop=gval.draggable.stop?combineCallbacks(options.draggable.stop,gval.draggable.stop):options.resize.stop),gval.resize&&(gval.resize.stop=gval.resize.stop?combineCallbacks(options.resize.stop,gval.resize.stop):options.resize.stop),angular.extend(options,gval)),gridster=scope.init(element,options)})}}}])}(),function(){"use strict";angular.module("ui.gridster").directive("uiGridsterItem",[function(){return{restrict:"A",require:"^uiGridster",link:function(scope,element,attrs,controller){var gridsterItem=null;element.addClass("ui-gridster-item"),attrs.$observe("uiGridsterItem",function(val){var ival=scope.$eval(val);"object"==typeof ival&&(gridsterItem=ival,scope.gridsterItem=gridsterItem,scope.widget=controller.addItem(element,ival.width,ival.height,ival.col,ival.row))}),element.bind("$destroy",function(){controller.removeItem(element)}),scope.$watchCollection("[gridsterItem.width, gridsterItem.height]",function(newValues){controller.resizeItem(scope.widget,newValues[0],newValues[1])})}}}])}();